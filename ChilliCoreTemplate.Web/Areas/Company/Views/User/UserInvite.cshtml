@model InviteManageModel

@using (await Html.ContainerTemplateAsync(TemplateTypes.PageHeader, new PageHeaderOptions())) { }
<page>
    @await Html.TemplateAsync(TemplateTypes.PageMessage)
    <box>
        <box-title title="Invite user">
            @*TODO: modal*@
            @*<div class="float-right-not-xs">
            <a class="btn btn-neutral btn-sm m-t-n-xs" href="javascript:@Html.ModalOpen(Mvc.Admin.User_InviteUpload)">Upload</a>
            </div>*@
        </box-title>
        <box-content>
            @using (Html.BeginFormCustom(Mvc.Company.User_Invite, htmlAttributes: new { enctype = "multipart/form-data" }))
            {
                @Html.ValidationSummary()

                @await Html.FieldTemplateForAsync(m => m.FirstName)
                @await Html.FieldTemplateForAsync(m => m.LastName)
                @await Html.FieldTemplateForAsync(m => m.Email)

                @await Html.FieldTemplateForAsync(m => m.InviteRole.Role, fieldOptions: new SelectFieldTemplateOptions() { SelectList = Model.RoleSelectionOptions })
                @Html.HiddenFor(m => m.InviteRole.CompanyId)
                @await Html.FieldTemplateForAsync(m => m.ProfilePhotoFile, fieldOptions: new FieldImageUploadWithPreviewOptions(Model.ProfilePhotoPath, new ImageSharpCommand { Format = ImageSharpFormat.JPG, Height = 200, Width = 200, Quality = 70, Mode = ResizeMode.Crop }) { AlternativeImage = "~/Images/generic/default-profile-image.jpg", ButtonText = "Upload Id" })

                <div class="hr-line-dashed"></div>
                <div class="form-group">
                    <div class="col-sm-6 offset-sm-2">
                        <button type="submit" class="btn btn-primary ladda-button js-ladda-button" data-style="expand-right">Invite</button>
                        <span class="m-l-sm">
                            <a mvc-action="@Mvc.Company.User_List">or cancel changes</a>
                        </span>
                    </div>
                </div>
            }
        </box-content>
    </box>
    <box>
        <box-title>Pending invitations</box-title>
        <box-content>
            <table class="table table-striped">
                <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Roles</th>
                        <th>Date Invited</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var invite in Model.Pending)
                    {
                        <tr>
                            <td>@invite.ShortName</td>
                            <td>@invite.Email</td>
                            <td>@invite.UserRoles.Select(r => r.Role.GetDescription()).FirstOrDefault()</td>
                            <td>
                                @if (invite.InvitedDate.HasValue)
                                {
                                    @invite.InvitedDate.Value.ToTimezone().ToCustomDate()
                                }
                            </td>
                            <td>
                                <a mvc-modal="Mvc.Company.User_InviteResend" asp-route-id="@invite.Id">Resend</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </box-content>
    </box>
</page>
@section scripts
    {
    <script>
        $(function () {
        });
    </script>
}
@section modal
{
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Company.User_InviteResend, Title = "Resend invite", Size = ModalSize.Medium })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.User_InviteUpload, Title = "Upload invitations" })
}