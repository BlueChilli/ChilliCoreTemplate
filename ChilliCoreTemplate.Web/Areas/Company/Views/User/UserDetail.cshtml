@model UserDetailsModel

@await Html.PartialAsync("Layout/_PageHeader", new PageHeaderOptions { Title = Model.Account.FullName })

<page>
    <box>
        <box-title title="@Model.Account.FullName" help="(@Model.Account.Email)">
            <div class="btn-group ms-auto">
                <div class="dropdown">
                    <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        Manage
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <a class="dropdown-item" mvc-modal="Mvc.Company.User_ResetPassword" asp-route-id="@Model.Account.Id">Reset password</a>
                        </li>
                        <li>
                            <a class="dropdown-item" mvc-modal="Mvc.Company.User_ChangeDetails" asp-route-id="@Model.Account.Id">Change account details</a>
                        </li>
                        <li>
                            <a class="dropdown-item" mvc-modal="Mvc.Company.User_ChangeStatus" asp-route-id="@Model.Account.Id">Delete (needs discussion)</a>
                        </li>
                    </ul>
                </div>
            </div>
        </box-title>
        <box-content>
            <div class="row">
                <div class="col-lg-6">
                    <headings title="Account information" class="bg-gray-100">
                        <heading title="Role">@String.Join(", ", Model.Account.UserRoles.Select(r => r.Role.GetDescription()))</heading>
                        <heading title="Status">@(Model.Account.StatusDescription)</heading>
                        <heading title="Email"><a href="mailto:@Model.Account.Email">@Model.Account.Email</a></heading>
                        <heading title="Phone" Condition="!String.IsNullOrEmpty(Model.Account.Phone)">@Model.Account.Phone</heading>
                        <heading title="Profile" Condition="!String.IsNullOrEmpty(Model.Account.ProfilePhotoPath)">@Html.Resizer().Image(Model.Account.ProfilePhotoPath, new ImageSharpCommand { Width = 100, Format = ImageSharpFormat.JPG, Quality = 100 })</heading>
                        <heading title="Last login" Condition="Model.Account.LastLoginDate.HasValue">@Model.Account.LastLoginDate.Value.ToTimezone().ToIsoDateTime()</heading>
                        <heading title="Activated on" Condition="Model.Account.ActivatedDate.HasValue">@Model.Account.ActivatedDate.Value.ToTimezone().ToIsoDateTime()</heading>
                        <heading title="Password changed on" Condition="Model.Account.LastPasswordChangedDate.HasValue">@Model.Account.LastPasswordChangedDate.Value.ToTimezone().ToIsoDateTime()</heading>
                    </headings>
                </div>
            </div>
        </box-content>
    </box>
</page>
<form id="impersonate" target="_self" method="post" action="@Mvc.Company.User_Impersonate.Url(this.Url)">
    <input type="hidden" name="id" id="impersonate-id" value="@Model.Account.Id" />
</form>
@section Scripts {
    <script>
        $(function () {
            $('a.js-impersonate').click(function (e) {
                e.preventDefault();
                $('#impersonate').submit();
            });
        });
    </script>
}
@section modal
    {
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Company.User_ResetPassword, Title = "Reset password" })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Company.User_ChangeDetails, Title = "Change details" })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Company.User_ChangeRole, Title = "Change role" })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Company.User_ChangeStatus, Title = "Change status" })
}