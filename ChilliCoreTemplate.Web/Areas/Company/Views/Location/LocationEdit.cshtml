@model LocationEditModel
@{
    var breadcrumb = new BreadcrumbOptions
    {
        Heading = Model.Id == 0 ? "Create a new location" : Model.Name,
        Title = Model.Id == 0 ? "Create" : Model.Name
    };
    var pageButtons = new Template_PageButtons
    {
        CancelMenuUrl = Model.Id == 0 ? Mvc.Company.Location_List.Url(this.Url) : Mvc.Company.Location_Detail.Url(this.Url, Model.Id)
    };
}
@await Html.PartialAsync("Layout/_Breadcrumb", breadcrumb)
@using (await Html.ContainerTemplateAsync(TemplateTypes.PageContainerLeft))
{
    using (Html.BeginFormCustom(Mvc.Company.Location_Edit, htmlAttributes: new { @class = "form-horizontal", enctype = "multipart/form-data", autocomplete = "off" }))
    {
        @Html.ValidationSummary()
        @await Html.TemplateAsync(TemplateTypes.PageButtons, pageButtons);
        @Html.HiddenFor(m => m.Id)

        <div class="ibox">
            <div class="ibox-title">
                <h5>
                    Location details
                </h5>
            </div>
            <div class="ibox-content">
                @await Html.FieldTemplateForAsync(m => m.Name)
                @await Html.FieldTemplateForAsync(m => m.Description)
                @await Html.FieldTemplateForAsync(m => m.Timezone, fieldOptions: new SelectFieldTemplateOptions() { SelectList = TimezoneHelper.GetSelectTimezones(Model.Timezone) })
                @await Html.FieldTemplateForAsync(m => m.IsActive)
            </div>
        </div>
    }
}
@section scripts
{
    <script>
        $(function () {

            $('#Timezone').chosen({
                width: "100%"
            });

        });
    </script>
}