@model CompanyDetailViewModel
@inject IWebHostEnvironment env;
@{
    var breadcrumb = new PageHeaderOptions
    {
        Heading = Model.Name,
        Title = "Details",
        Tabs = new List<string> { "Details", "Admins" }
    };
    var archiveOrDelete = Model.IsDeleted ? "Unarchive" : Model.HasAdmins ? "Archive" : "Delete";
}
@await Html.PartialAsync("Layout/_PageHeader", breadcrumb)
<page>
    @await Html.TemplateAsync(TemplateTypes.PageMessage)

    <tab-content>
        <tab-pane id="1" is-active="true">
            <box>
                <box-title title="@Model.Name">
                    <div class="btn-group ms-auto">
                        <button style="Primary" mvc-action="Mvc.Admin.Company_Edit" asp-route-id="@Model.Id">Edit</button>
                        @if (Model.HasAdmins)
                        {
                            <buttonpost mvc-action="Mvc.Admin.Company_Impersonate" asp-route-id="@Model.Id">Impersonate</buttonpost>
                        }
                        <button mvc-modal="Mvc.Admin.Company_Delete" asp-route-id="@Model.Id">@archiveOrDelete</button>
                        @if (Model.IsDeleted)
                        {
                            <button mvc-modal="Mvc.Admin.Company_Purge" asp-route-id="@Model.Id">Purge!</button>
                        }
                    </div>
                </box-title>
                <box-content>
                    <div class="row">
                        <div class="col-lg-6">
                            <headings>
                                <heading title="Master company" Condition="!String.IsNullOrEmpty(Model.MasterCompany)">@Model.MasterCompany</heading>
                                <heading title="Description" Condition="!String.IsNullOrEmpty(Model.Description)">@Model.Description</heading>
                                <heading title="Website" Condition="!String.IsNullOrEmpty(Model.Website)">@Model.Website</heading>
                                <heading title="Notes" Condition="!String.IsNullOrEmpty(Model.Notes)">@Model.Notes</heading>
                                <heading title="Logo" condition="!String.IsNullOrEmpty(Model.LogoPath)">
                                    @Html.Resizer().Image(Model.LogoPath, new ImageSharpCommand { Height = 50 })
                                </heading>
                                <heading title="Status"><label type="@Model.IsDeleted ? LabelType.Warning : LabelType.Success">@(Model.IsDeleted ? "Archived" : "Active")</label></heading>
                            </headings>
                        </div>
                        <div class="col-lg-6">
                            <heading title="Stripe Id"><a href="https://connect.stripe.com/@Html.When(!env.IsProduction(), "test/")customers/@Model.StripeId" target="_blank">@Model.StripeId</a></heading>
                            <heading title="Guid">@Model.Guid</heading>
                        </div>
                    </div>
                </box-content>
            </box>
        </tab-pane>
        <tab-pane id="2">
            <box>
                <box-title title="@Model.Name admins">
                    <button type="button" class="btn btn-primary btn-sm js-user-add ms-auto">Invite</button>
                </box-title>
                <box-content>
                    <div class="d-none js-user-new">
                        @await Html.PartialAsync("CompanyAdminAdd")
                    </div>

                    <div class="row">
                        <div class="col-12">
                            <table-default class="js-user-table">
                                <thead class="table-light">
                                    <tr>
                                        <th>IsNew</th>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Status</th>
                                        <th style="width: 150px;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table-default>
                        </div>
                    </div>
                </box-content>
            </box>
        </tab-pane>
    </tab-content>

</page>
@section scripts
{
    <script>
        var userTable, userId, priceId;

        $(function () {

            $('.js-user-add').click(function () {
                $('.js-user-add').hide();
                $('.js-user-new').removeClass('d-none');
                $('#@Html.IdFor(m => m.Admin.Email)').focus();
            });

            SetupUserForm();

            $('.js-user-table').on('click', '.js-remove', function (e) {
                e.preventDefault();
                userId = $(this).data('id');
                @Html.ModalOpen(Mvc.Admin.Company_Admin_Remove, new MenuUrlValues(Model.Id), "{ userId: userId }");
            });

            $('.js-user-table').on('click', '.js-resend', function (e) {
                e.preventDefault();
                userId = $(this).data('id');
                @Html.ModalOpen(Mvc.Admin.Company_Admin_Resend, new MenuUrlValues(Model.Id), "{ userId: userId }");
            });

            userTable = $('.js-user-table').dataTable({
                dom: 'Tgtip',
                "iDisplayLength": 100,
                "order": [[1, "asc"]],
                "serverSide": true,
                "processing": true,
                "serverMethod": "POST",
                "autoWidth": false,
                "ajax": {
                    "url": "@Mvc.Admin.Company_Admin_List.Url(this.Url, Model.Id)",
                },
                "columns": [
                    {
                        "orderable": false,
                        "visible": false,
                        "data": 'isNew'
                    },
                    {
                        "orderable": true,
                        "data": "name",
                    },
                    {
                        "orderable": false,
                        "data": 'email'
                    },
                    {
                        "orderable": false,
                        "data": 'status',
                        render: function (data, type, row) {
                            return '<span class="badge bg-{0}">{1}</span>'.format(data == 'Invited' || data == 'Applied' ? 'warning' : 'success', data);
                        }

                    },
                    {
                        "orderable": false,
                        "data": null,
                        render: function (data, type, row) {
                            var view = '<a href="@Mvc.Admin.User_Users_Details.Url(this.Url)/' + data.userId + '" class="btn btn-sm btn-square btn-neutral" data-bs-toggle="tooltip" data-bs-original-title="View"><i class="bi bi-eye"></i></a>';
                            var remove = '<a class="js-remove btn btn-sm btn-square btn-neutral" data-bs-toggle="tooltip" data-bs-original-title="Remove" href="#" data-id="' + data.userId + '"><i class="bi bi-trash"></i></a>';
                            if (data.status == 'Invited')
                            {
                                view += '<a class="js-resend btn btn-sm btn-square btn-neutral" data-bs-toggle="tooltip" data-bs-original-title="Resend" href="#" data-id="' + data.userId + '"><i class="bi bi-arrow-repeat"></i></a>';
                            }
                            return view += remove;
                        }
                    },
                ],
                createdRow: function (row, data, dataIndex, cells) {
                    if (data.isNew) {
                        $(row).css('background-color', '#fcf8e3');
                    }
                },
                initComplete: function() {
                    var footer = $(this).parents('div.card').children('div.card-footer');
                    $(this).siblings('.dataTables_info').appendTo(footer.children('.js-table-showing'));
                    $(this).siblings('.dataTables_paginate').appendTo(footer.children('.js-table-paginate'));
                },
                drawCallback: function(settings) {
                    initTooltips();
                }
            });
        });

        function SearchTable(table) {
            var api = table.api();

            api.search($('#Search').val());

            api.draw();
        }

        function SetupUserForm() {
            $('#@Mvc.Admin.Company_Admin_Add.GetFormId()').ajaxForm({ target: '.js-user-new' });
            $('.js-user-new #@Html.IdFor(m => m.Admin.Email)').change(function () {
                $.getJSON('@Mvc.Admin.Company_Admin_Detail.Url(this.Url)', { id: @Model.Id, email: $(this).val() }, function (data) {
                    if (data.id != 0) {
                        $('.js-user-new #@Html.IdFor(m => m.Admin.Email)').val(data.email);
                        $('.js-user-new #@Html.IdFor(m => m.Admin.FirstName)').val(data.firstName);
                        $('.js-user-new #@Html.IdFor(m => m.Admin.LastName)').val(data.lastName);
                    }
                });
            });
            $('.js-user-cancel').click(function () {
                $('.js-user-add').show();
                $('.js-user-new').addClass('d-none');
            });
        }


    </script>
}
@section Modal
{
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.Company_Delete, Title = $"{archiveOrDelete} Company", Size = ModalSize.Medium })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.Company_Purge, Title = $"Purge Company", Size = ModalSize.Medium })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.Company_Admin_Remove, Title = "Remove admin", Size = ModalSize.Medium })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.Company_Admin_Resend, Title = "Resend invite", Size = ModalSize.Medium })
}
