@inject IWebHostEnvironment env;
@inject ProjectSettings config;
@model UserDetailsModel

@using (await Html.ContainerTemplateAsync(TemplateTypes.PageHeader, new PageHeaderOptions { Title = Model.Account.FullName })) { }
<page>
    @await Html.TemplateAsync(TemplateTypes.PageMessage)
    <box>
        <box-title title="@Model.Account.FullName" description="(@Model.Account.Email)">
            <div class="btn-group ms-auto">
                <div class="dropdown">
                  <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                    Manage
                  </button>
                  <ul class="dropdown-menu">
                    <li>
                        <a class="dropdown-item" mvc-modal="Mvc.Admin.User_ResetPassword" asp-route-userid="@Model.Account.Id">Reset password</a>
                    </li>
                    <li>
                        <a class="dropdown-item" mvc-modal="Mvc.Admin.User_ChangeDetails" asp-route-id="@Model.Account.Id">Change account details</a>
                    </li>
                    <li>
                        <a class="dropdown-item" mvc-modal="Mvc.Admin.User_ChangeRole" asp-route-id="@Model.Account.Id">Change account role</a>
                    </li>
                    <li>
                        <a class="dropdown-item" mvc-modal="Mvc.Admin.User_ChangeStatus" asp-route-id="@Model.Account.Id">Change account status</a>
                    </li>
                    @if(Model.Account.Status == UserStatus.Deleted)
                    {
                    <li>
                        <a class="dropdown-item" mvc-modal="Mvc.Admin.User_Purge" asp-route-id="@Model.Account.Id">Purge account</a>
                    </li>                                
                    }
                    @if (User.UserData().CanImpersonate(Model.Account))
                    {
                        <li>
                            <a href="#" class="dropdown-item js-impersonate">Impersonate</a>
                        </li>
                    }
                  </ul>
                </div>
            </div>
        </box-title>
        <box-content>
            <div class="row">
                <div class="col-lg-6">
                    <headings title="Account information" class="bg-gray-100">
                        <heading title="Role">@String.Join(", ", Model.Account.UserRoles.Select(r => r.Role.GetDescription()))</heading>
                        <heading title="Company" Condition="Model.Account.Companies.Any()">
                            @foreach (var company in Model.Account.Companies)
                            {
                                <a mvc-action="Mvc.Admin.Company_Detail" asp-route-id="@company.Id">@company.Name</a>
                            }
                        </heading>
                        <heading title="Status">@(Model.Account.StatusDescription)</heading>
                        <heading title="Email"><a href="mailto:@Model.Account.Email">@Model.Account.Email</a></heading>
                        @if (config.MailSettings.Quarantine.QuarantineDomain == "mailinator.com" && config.MailSettings.Quarantine.ShouldQuarantine(Model.Account.Email))
                        {
                            <heading title="Inbox"><a href="https://www.mailinator.com/v4/public/inboxes.jsp?to=@WebUtility.UrlEncode(config.MailSettings.Quarantine.Quarantine(Model.Account.Email, noDomain: true))" target="_blank">Mailinator <i class="bi bi-box-arrow-in-up-right"></i></a></heading>
                        }
                        <heading title="Phone" Condition="!String.IsNullOrEmpty(Model.Account.Phone)">@Model.Account.Phone</heading>
                        <heading title="Profile" Condition="!String.IsNullOrEmpty(Model.Account.ProfilePhotoPath)">@Html.Resizer().Image(Model.Account.ProfilePhotoPath, new ImageSharpCommand { Width = 100, Format = ImageSharpFormat.JPG, Quality = 100 })</heading>
                        <heading title="Last login" Condition="Model.Account.LastLoginDate.HasValue">@Model.Account.LastLoginDate.Value.ToTimezone().ToIsoDateTime()</heading>
                        <heading title="Activated on" Condition="Model.Account.ActivatedDate.HasValue">@Model.Account.ActivatedDate.Value.ToTimezone().ToIsoDateTime()</heading>
                        <heading title="Password changed on" Condition="Model.Account.LastPasswordChangedDate.HasValue">@Model.Account.LastPasswordChangedDate.Value.ToTimezone().ToIsoDateTime()</heading>
                    </headings>
                </div>
                <div class="col-lg-6">
                    <box>
                        <box-title title="Last activity" class="bg-gray-100">
                            <div class="ms-auto">
                                <a mvc-action="@Mvc.Admin.User_Activity.AddRouteValues(new { UserId = Model.Account.Id })"><i class="bi bi-box-arrow-in-up-right"></i></a>
                            </div>
                        </box-title>
                        <box-content>
                            <table class="table table-striped">
                                <thead class="table-light">
                                    <tr>
                                        <th>Date</th>
                                        <th>Type</th>
                                        <th>Activity</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var activity in Model.LastActivities)
                                    {
                                        <tr>
                                            <td>@activity.ActivityOn.ToTimezone().ToIsoDateTime()</td>
                                            <td>@activity.EntityType.GetDescription()</td>
                                            <td>@activity.ActivityType.GetDescription()</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </box-content>
                    </box>
                </div>
            </div>
        </box-content>
    </box>

</page>
<form id="impersonate" target="_self" method="post" action="@Mvc.Admin.User_Impersonate.Url(this.Url)">
    <input type="hidden" name="id" id="impersonate-id" value="@Model.Account.Id" />
</form>
@section Scripts {
    <script>
        $(function () {
            $('a.js-impersonate').click(function (e) {
                e.preventDefault();
                $('#impersonate').submit();
            });
        });
    </script>
}
@section modal
    {
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.User_ResetPassword, Title = "Reset password" })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.User_ChangeDetails, Title = "Change details" })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.User_ChangeRole, Title = "Change role" })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.User_ChangeStatus, Title = "Change status" })
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.User_Purge, Title = "Purge account" })
}