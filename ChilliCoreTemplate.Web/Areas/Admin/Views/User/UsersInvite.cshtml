@model InviteManageModel

@await Html.PartialAsync("Layout/_Breadcrumb", new BreadcrumbOptions())
@using (await Html.ContainerTemplateAsync(TemplateTypes.PageContainerLeft))
{
    @await Html.TemplateAsync(TemplateTypes.PageMessage)
    <div class="ibox">
        <div class="ibox-title">
            <h5>Invite user</h5>
            @*TODO: modal*@
            @*<div class="float-right-not-xs">
                    <a class="btn btn-default btn-sm m-t-n-xs" href="javascript:@Html.ModalOpen(Mvc.Admin.User_InviteUpload)">Upload</a>
                </div>*@
        </div>
        <div class="ibox-content">
            @using (Html.BeginFormCustom(Mvc.Admin.User_Invite, htmlAttributes: new { enctype = "multipart/form-data" }))
            {
                @Html.ValidationSummary()

                @await Html.FieldTemplateForAsync(m => m.FirstName)
                @await Html.FieldTemplateForAsync(m => m.LastName)
                @await Html.FieldTemplateForAsync(m => m.Email)

                @await Html.FieldTemplateForAsync(m => m.InviteRole.Role, fieldOptions: new SelectFieldTemplateOptions() { SelectList = Model.RoleSelectionOptions })
                <div id="OrganisationAdminDetails" class="hide">
                    @await Html.FieldTemplateForAsync(m => m.InviteRole.CompanyId, new TemplateOptions() { Label = "Company", IsMandatory = true }, fieldOptions: new SelectFieldTemplateOptions() { SelectList = Model.InviteRole.CompanyList })
                    @*@await Html.FieldTemplateForAsync(m => m.InviteRole.CompanyName, new TemplateOptions() { Label = "Company name", IsMandatory = true })*@
                </div>

                @await Html.FieldTemplateForAsync(m => m.ProfilePhotoFile, fieldOptions: new FieldImageUploadWithPreviewOptions(Model.ProfilePhotoPath, new ImageSharpCommand { Format = ImageSharpFormat.JPG, Height = 200, Width = 200, Quality = 70, Mode = ResizeMode.Crop }) { AlternativeImage = "~/Images/generic/default-profile-image.jpg", ButtonText = "Upload Id" })

                <div class="hr-line-dashed"></div>
                <div class="form-group">
                    <div class="col-sm-6 offset-sm-2">
                        <button type="submit" class="btn btn-primary ladda-button js-ladda-button" data-style="expand-right">Invite</button>
                        <span class="m-l-sm">
                            <a mvc-action="@Mvc.Admin.User_Users">or cancel changes</a>
                        </span>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="ibox">
        <div class="ibox-title">
            <h5>Pending invitations</h5>
        </div>
        <div class="ibox-content">

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Roles</th>
                        <th>Date Invited</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var invite in Model.Pending)
                    {
                        <tr>
                            <td>@invite.ShortName</td>
                            <td>@invite.Email</td>
                            <td>@invite.UserRoles.Select(r => r.Role.GetDescription()).FirstOrDefault()</td>
                            <td>
                                @if (invite.InvitedDate.HasValue)
                                {
                                    @invite.InvitedDate.Value.ToTimezone().ToCustomDate()
                                }
                            </td>
                            <td>
                                @Html.LinkPost(Mvc.Admin.User_InviteResend, "Resend", new { id = invite.Id }, linkClasses: "m-r-sm")
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
@section modal
    {
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.User_InviteUpload, Title = "Upload invitations" })
}

@section scripts
    {
    <script>
        function checkOrganisationAdminRole() {
            var val = $('#@Html.IdFor(m => m.InviteRole.Role)').val();
            if (val === '@Role.CompanyAdmin.ToString()' || val === '@Role.CompanyUser.ToString()') {
                $('#OrganisationAdminDetails').removeClass('hide');
            } else {
                $('#OrganisationAdminDetails').addClass('hide');
            }
        }

        $(function () {
            $('.i-checks').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green'
            });

            checkOrganisationAdminRole();

            $('#@Html.IdFor(m => m.InviteRole.Role)').on('change', function () {
                checkOrganisationAdminRole();
            });
        });
    </script>
}