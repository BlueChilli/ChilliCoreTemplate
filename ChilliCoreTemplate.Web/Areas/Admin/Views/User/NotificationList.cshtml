@model PushNotificationListModel
@using (await Html.ContainerTemplateAsync(TemplateTypes.PageHeader, new PageHeaderOptions())) { }
<page>
    @await Html.TemplateAsync(TemplateTypes.PageMessage)

    <filter>
        <filter-left>
            @await Html.FieldDateRangeForAsync(m => m.DateFrom, m => m.DateTo, x => x == null ? null : x.Value.ToTimezone().ToIsoDate())
        </filter-left>
    </filter>
    <filter>
        <filter-left>
            @await Html.FieldTemplateInnerForAsync(m => m.Type)
            @await Html.FieldTemplateInnerForAsync(m => m.Sent, fieldOptions: new SelectFieldTemplateOptions { SelectList = Model.SentList })
            @await Html.FieldTemplateInnerForAsync(m => m.Opened, fieldOptions: new SelectFieldTemplateOptions { SelectList = Model.OpenedList })
        </filter-left>
        <filter-right>
            @await Html.FieldTemplateInnerForAsync(m => m.Search, fieldOptions: new InputFieldTemplateOptions { PreAddOn = FieldTemplateOptions.IconAddOn("search") })
        </filter-right>
    </filter>

    <box>
        <box-content>
            <table-default class="js-notifications-table">
                <thead class="table-light">
                    <tr>
                        <th>Date</th>
                        <th>Recipient</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Sent</th>
                        <th>Opened</th>
                        <th>Error</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table-default>
        </box-content>
    </box>
</page>
@section Scripts
{
    <script>
        var table, notificationId;

        $(function () {
            $('.input-daterange').datepicker({
                format: 'yyyy-mm-dd',
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true
            }).on('changeDate', function (ev) {
                $('.js-notifications-table').DataTable().draw();
            });

            table = $('.js-notifications-table').dataTable({
                "processing": true,
                "serverSide": true,
                "ajax": {
                    "url": "@Mvc.Admin.User_Notification_Query.Url(this.Url)",
                    "data": function ( d ) {
                        d.dateFrom = $('#DateFrom').val();
                        d.dateTo = $('#DateTo').val();
                    }
                },
                "columns": [
                    { "data": "createdOnDisplay" },
                    { "data": "recipient" },
                    {
                        "data": "type",
                        "orderable": false
                    },
                    {
                        "data": "status",
                        "orderable": false
                    },
                    {
                        "data": "isSent",
                        "orderable": false
                    },
                    {
                        "data": "isOpened",
                        "orderable": false
                    },
                    {
                        "data": "error",
                        "orderable": false
                    },
                    {
                        "orderable": false,
                        "data": null,
                        render: function ( data, type, row ) {
                            return '<a href="#" class="js-view" data-id="{0}">View</a>'.format(data.id);
                        }
                    },
                ],
                "iDisplayLength": 50,
                dom: 'Tgtip'
            });

            $('.js-notifications-table').on('click', '.js-view', function () {
                notificationId = $(this).data('id');
                @Html.ModalOpen(Mvc.Admin.User_Notification_Detail, data: "{ id: notificationId }");
            });

            $('#Search').on('keyup', function () {
                SearchTable();
            });

            $('#Type,#Sent,#Opened').on('change', function () {
                SearchTable();
            });

        });

        function SearchTable() {
            var api = table.api();

            api.search($('#Search').val());

            if ($('#Type').val() != '') {
                api.column(2).search($('#Type').val(), false, false, false);
            } else {
                api.column(2).search('');
            }

            if ($('#Sent').val() != '') {
                api.column(4).search($('#Sent').val(), false, false, false);
            } else {
                api.column(4).search('');
            }

            if ($('#Opened').val() != '') {
                api.column(5).search($('#Opened').val(), false, false, false);
            } else {
                api.column(5).search('');
            }

            api.draw();
        }

    </script>
}
@section modal
{
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.User_Notification_Detail, Title = "Notification detail", Size = ModalSize.Large })
}
