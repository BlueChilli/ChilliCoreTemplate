@model UsersViewModel
@await Html.PartialAsync("Layout/_PageHeader", new PageHeaderOptions { Partial = "_InviteUser" })
<page>
    @await Html.TemplateAsync(TemplateTypes.PageMessage)
@*    <div class="row">
    @foreach (var statistic in Model.Statistics)
    {
        <div class="col-md-4">
            @await Html.PartialAsync("_Statistic", statistic)
        </div>
    }
</div>
*@

    <filter>
        <filter-left>
            @await Html.FieldTemplateInnerForAsync(m => m.Role)
            @await Html.FieldTemplateInnerForAsync(m => m.Status)
        </filter-left>
        <filter-right>
            @await Html.FieldTemplateInnerForAsync(m => m.Search, fieldOptions: new InputFieldTemplateOptions { PreAddOn = FieldTemplateOptions.IconAddOn("search") })
        </filter-right>
    </filter>

    <box>
        <box-content>
            <table-default class="js-users-table">
                <thead class="table-light">
                    <tr>
                        <th data-priority="1">Name</th>
                        <th data-priority="2">Surname</th>
                        <th data-priority="3">Email</th>
                        <th data-priority="7">Phone</th>
                        <th data-priority="6">Company</th>
                        <th data-priority="4">Role</th>
                        <th data-priority="5">Status</th>
                        <th data-priority="8">Last login</th>
                        <th data-priority="2">Actions</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table-default>
        </box-content>
    </box>
</page>

<form id="impersonate" target="_self" method="post" action="@Mvc.Admin.User_Impersonate.Url(this.Url)">
    <input type="hidden" name="id" id="impersonate-id" value="" />
</form>
@section Scripts {
    <script>
        var table;
        $(function () {

            table = $('.js-users-table').dataTable({
                dom: 'Tgtip',
                "iDisplayLength": 50,
                responsive: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    "url": "@Mvc.Admin.User_Users_Query.Url(this.Url)",
                    "type": "POST"
                },
                "columns": [
                    { "data": "firstName", "orderable": true },
                    { "data": "lastName", "orderable": true },
                    {
                        "data": "email",
                        "orderable": true,
                        render: function (data, type, row) {
                            return '<a href="@Mvc.Admin.User_Users_Details.Url(this.Url)/{0}">{1}</a>'.format(row.id, row.email);
                        }
                    },
                    { "data": "phone", "orderable": false },
                    {
                        "data": "Company", "orderable": true,
                        render: function (data, type, row) {
                            return row.Company == null ? '' : '<a href="@Mvc.Admin.Company_Detail.Url(this.Url)/{0}">{1}</a>'.format(row.Company.id, row.Company.name);
                        }
                    },
                    { "data": "role", "orderable": false },
                    {
                        "data": "status",
                        "orderable": false,
                        render: function (data, type, row) {
                            return '<span class="badge bg-{0}">{1}</span>'.format(row.status == '@UserStatus.Activated' ? "success" : "warning", row.status);
                        }
                    },
                    { "data": "lastLoginOn", "orderable": true },
                    {
                        "orderable": false,
                        "data": null,
                        render: function ( data, type, row ) {
                            return '<a href="@Mvc.Admin.User_Users_Details.Url(this.Url)/{0}" class="btn btn-sm btn-square btn-neutral" data-bs-toggle="tooltip" data-bs-original-title="View"><i class="bi bi-eye"></i></a>'.format(data.id);
                        }
                    },
                ]
            });

            $('#Search').on('keyup', function () {
                SearchTable();
            });

            $('#Role,#Status').on('change', function () {
                SearchTable();
            });
        });

        function SearchTable() {
            var api = table.api();

            if ($('#Role').val() != '') {
                api.column(5).search($('#Role').val(), false, false, false);
            } else {
                api.column(5).search('');
            }

            if ($('#Status').val() != '') {
                api.column(6).search($('#Status').val(), false, false, false);
            } else {
                api.column(6).search('');
            }

            api.search($('#Search').val());

            api.draw();
        }

    </script>
    <script>
        $(function () {

            $('a i.fa-area-chart').click(function (e) {
                e.preventDefault();
                var parent = $(this).parents('.ibox');

                parent.find('.js-totals, .js-chart').toggle();
                var chart = parent.find('.js-chart');

                if (chart.is(':visible')) {
                    lineData.labels = eval(chart.data('labels'));
                    lineData.datasets[0].data = eval(chart.data('data'));
                    var ctx = chart.find('canvas')[0].getContext("2d");
                    var myNewChart = new Chart(ctx).Line(lineData, lineOptions);
                }
            });

            var lineData = {
                labels: [],
                datasets: [
                    {
                        fillColor: "rgba(26,179,148,0.5)",
                        strokeColor: "rgba(26,179,148,0.7)",
                        pointColor: "rgba(26,179,148,1)",
                        pointStrokeColor: "#fff",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(26,179,148,1)",
                        data: []
                    }
                ]
            };

            var lineOptions = {
                scaleShowGridLines: true,
                scaleGridLineColor: "rgba(0,0,0,.05)",
                scaleGridLineWidth: 1,
                bezierCurve: true,
                bezierCurveTension: 0.4,
                pointDot: true,
                pointDotRadius: 4,
                pointDotStrokeWidth: 1,
                pointHitDetectionRadius: 20,
                datasetStroke: true,
                datasetStrokeWidth: 2,
                datasetFill: true,
                responsive: true,
            };


        });
    </script>
}