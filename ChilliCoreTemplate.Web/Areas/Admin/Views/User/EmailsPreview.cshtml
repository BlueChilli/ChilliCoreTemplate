@model EmailPreviewModel
@{
    var pageButtons = new Template_PageButtons
    {
        SaveMenuText = null,
        CancelMenuUrl = Mvc.Admin.User_Emails.Url(this.Url)
    };
    pageButtons.Buttons.Add(await Html.ButtonAsync(new Template_Button { Style = ButtonStyle.Primary, Type = ButtonType.Button, Text = "Preview", IsLaddaButton = false, HtmlAttributes = new { onclick = Html.ModalOpen(Mvc.Admin.User_EmailsPreviewShow, data: "{ id: $('#Id').val(), data: $('#Data').val() }") } }));
}

@await Html.PartialAsync("Layout/_PageHeader", new PageHeaderOptions())
<page>
    @await Html.TemplateAsync(TemplateTypes.PageMessage)
    @using (Html.BeginFormCustom(Mvc.Admin.User_EmailsPreview, htmlAttributes: new { enctype = "multipart/form-data" }))
    {
        @Html.ValidationSummary()
        @await Html.TemplateAsync(TemplateTypes.PageButtons, pageButtons)

        <box>
            <box-title>Email preview</box-title>
            <box-content>
                @await Html.FieldTemplateForAsync(m => m.Id, options: new TemplateOptions { FieldSize = FieldTemplateSize.Large }, fieldOptions: new SelectFieldTemplateOptions { SelectList = Model.EmailList })
                @await Html.FieldTemplateForAsync(m => m.Data, options: new TemplateOptions { FieldSize = FieldTemplateSize.Large })
            </box-content>
        </box>
    }
</page>
@section Scripts
{
    <script>
        var data = @Html.Raw(Model.Emails.Select(x => x.Data).ToJson(Newtonsoft.Json.Formatting.Indented));

        $(function () {
                $('#Id').change(function () {
                $('#Data').val(JSON.stringify(data[$(this).val()], null, 4));
            });

        });
    </script>
}
@section modal
{
    @await Html.PartialAsync("Layout/_Modal", new ModalViewModel { Menu = Mvc.Admin.User_EmailsPreviewShow, Title = "Email", Size = ModalSize.Large })
}