@model RegistrationViewModel
@{
    var termsUrl = "#";
}

<h2 class="m-t-md m-b-xl">Account registration</h2>

@using (Html.BeginFormCustom(Mvc.Root.EmailAccount_Registration))
{
    @Html.ValidationSummary()
    @Html.HiddenFor(m => m.Roles)
    if (Model.Roles.IsCompanyRole())
    {
        <div class="form-group">
            @await Html.FieldTemplateInnerForAsync(m => m.CompanyName, htmlAttributes: new { autofocus = "autofocus", @class = "form-control-lg" })
        </div>
    }
    <div class="form-group">
        @await Html.FieldTemplateInnerForAsync(m => m.FirstName, htmlAttributes: new { autofocus = Model.Roles.IsCompanyRole() ? "" : "autofocus", @class = "form-control-lg" })
    </div>
    <div class="form-group">
        @await Html.FieldTemplateInnerForAsync(m => m.LastName, htmlAttributes: new { @class = "form-control-lg" })
    </div>
    <div class="form-group">
        @await Html.FieldTemplateInnerForAsync(m => m.Email, htmlAttributes: new { @class = "form-control-lg" })
    </div>
    <div class="form-group">
        @await Html.FieldTemplateInnerForAsync(m => m.Password, htmlAttributes: new { @class = "form-control-lg" })
    </div>
    <div class="form-group">
        @await Html.FieldTemplateInnerForAsync(m => m.AcceptTermsConditions, new CheckboxFieldTemplateOptions { CheckBoxAttribute = new CheckBoxAttribute { IsAlternative = true, Label = $"I accept the <a href=\"{termsUrl}\" target=\"_blank\">terms & conditions</a>" } })
    </div>

    <button type="submit" class="btn btn-primary btn-lg full-width m-b">Join</button>

    <a mvc-action="@Mvc.Root.EmailAccount_Login">Already have an account?</a>
}